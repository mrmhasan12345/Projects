/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unit.convertor.view;

/**
 *
 * @author Pesan
 */
public class Length extends javax.swing.JFrame {

    /**
     * Creates new form Length
     */
    public Length() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JTextField();
        menu = new javax.swing.JButton();
        convert = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        inUnit = new javax.swing.JComboBox<>();
        outUnit = new javax.swing.JComboBox<>();
        output = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Length Converter");
        setLocation(new java.awt.Point(275, 200));
        setMaximizedBounds(new java.awt.Rectangle(275, 200, 275, 200));
        setMaximumSize(new java.awt.Dimension(700, 400));
        setMinimumSize(new java.awt.Dimension(700, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(input, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 129, 120, -1));

        menu.setText("Menu");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });
        getContentPane().add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 340, 95, 35));

        convert.setText("Convert");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });
        getContentPane().add(convert, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 223, 95, 35));

        title.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Length");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 700, -1));

        inUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Input Unit", "Millimeters", "Centimeters", "Meters", "Kilometers", "Inches", "Feet", "Yards", "Miles" }));
        getContentPane().add(inUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 129, -1, -1));

        outUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Output Unit", "Millimeters", "Centimeters", "Meters", "Kilometers", "Inches", "Feet", "Yards", "Miles" }));
        getContentPane().add(outUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 129, -1, -1));

        output.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(output, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 131, 210, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unit/convertor/view/length.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        // TODO add your handling code here:
        String sInput = input.getText();
        String sInUnit = inUnit.getSelectedItem().toString();
        String sOutUnit = outUnit.getSelectedItem().toString();

        if (sInput.equals("")){
            output.setText("Please Enter a Value to Convert");
        }
        else {

            if (sInUnit=="Millimeters"){
                if (sOutUnit=="Millimeters"){
                    double mm2mm = Double.parseDouble(sInput);
                    output.setText(Double.toString(mm2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double mm2cm = Double.parseDouble(sInput)/10;
                    output.setText(Double.toString(mm2cm));
                }
                else if (sOutUnit=="Meters"){
                    double mm2m = Double.parseDouble(sInput)/1000;
                    output.setText(Double.toString(mm2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double mm2km = Double.parseDouble(sInput)/1000000;
                    output.setText(Double.toString(mm2km));
                }
                else if (sOutUnit=="Inches"){
                    double mm2in = Double.parseDouble(sInput)/25;
                    output.setText(Double.toString(mm2in));
                }
                else if (sOutUnit=="Feet"){
                    double mm2ft = Double.parseDouble(sInput)/300;
                    output.setText(Double.toString(mm2ft));
                }
                else if (sOutUnit=="Yards"){
                    double mm2y = Double.parseDouble(sInput)*0.0010936;
                    output.setText(Double.toString(mm2y));
                }
                else if (sOutUnit=="Miles"){
                    double mm2mi = Double.parseDouble(sInput)*0.00000062137;
                    output.setText(Double.toString(mm2mi));
                }

                else {
                    output.setText("Please Select an Output Unit");
                }
            }

            else if (sInUnit=="Centimeters"){
                if (sOutUnit=="Millimeters"){
                    double cm2mm = Double.parseDouble(sInput)*10;
                    output.setText(Double.toString(cm2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double cm2cm = Double.parseDouble(sInput);
                    output.setText(Double.toString(cm2cm));
                }
                else if (sOutUnit=="Meters"){
                    double cm2m = Double.parseDouble(sInput)/100;
                    output.setText(Double.toString(cm2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double cm2km = Double.parseDouble(sInput)/100000;
                    output.setText(Double.toString(cm2km));
                }
                else if (sOutUnit=="Inches"){
                    double cm2in = Double.parseDouble(sInput)/2.5;
                    output.setText(Double.toString(cm2in));
                }
                else if (sOutUnit=="Feet"){
                    double cm2ft = Double.parseDouble(sInput)/30;
                    output.setText(Double.toString(cm2ft));
                }
                else if (sOutUnit=="Yards"){
                    double cm2y = Double.parseDouble(sInput)*0.010936;
                    output.setText(Double.toString(cm2y));
                }
                else if (sOutUnit=="Miles"){
                    double cm2mi = Double.parseDouble(sInput)*0.0000062137;
                    output.setText(Double.toString(cm2mi));
                }

                else {
                    output.setText("Please Select an Output Unit");
                }
            }

            else if (sInUnit=="Meters"){
                if (sOutUnit=="Millimeters"){
                    double m2mm = Double.parseDouble(sInput)*250;
                    output.setText(Double.toString(m2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double m2cm = Double.parseDouble(sInput)*100;
                    output.setText(Double.toString(m2cm));
                }
                else if (sOutUnit=="Meters"){
                    double m2m = Double.parseDouble(sInput);
                    output.setText(Double.toString(m2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double m2km = Double.parseDouble(sInput)/1000;
                    output.setText(Double.toString(m2km));
                }
                else if (sOutUnit=="Inches"){
                    double m2in = Double.parseDouble(sInput)*100/2.5;
                    output.setText(Double.toString(m2in));
                }
                else if (sOutUnit=="Feet"){
                    double m2ft = Double.parseDouble(sInput)*100/30;
                    output.setText(Double.toString(m2ft));
                }
                else if (sOutUnit=="Yards"){
                    double m2y = Double.parseDouble(sInput)* 1.0936;
                    output.setText(Double.toString(m2y));
                }
                else if (sOutUnit=="Miles"){
                    double m2mi = Double.parseDouble(sInput)*0.00062137;
                    output.setText(Double.toString(m2mi));
                }

                else {
                    output.setText("Please Select an Output Unit");
                }
            }

            else if (sInUnit=="Kilometers"){
                if (sOutUnit=="Millimeters"){
                    double km2mm = Double.parseDouble(sInput)*1000000;
                    output.setText(Double.toString(km2mm));
                }
                else if (sOutUnit=="Centimeter"){
                    double km2cm = Double.parseDouble(sInput)*100000;
                    output.setText(Double.toString(km2cm));
                }
                else if (sOutUnit=="Meters"){
                    double km2m = Double.parseDouble(sInput)*1000;
                    output.setText(Double.toString(km2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double km2km = Double.parseDouble(sInput);
                    output.setText(Double.toString(km2km));
                }
                else if (sOutUnit=="Inches"){
                    double km2in = Double.parseDouble(sInput)*100000/2.5;
                    output.setText(Double.toString(km2in));
                }
                else if (sOutUnit=="Feet"){
                    double km2ft = Double.parseDouble(sInput)*100000/30;
                    output.setText(Double.toString(km2ft));
                }
                else if (sOutUnit=="Yards"){
                    double km2y = Double.parseDouble(sInput)*1093.6;
                    output.setText(Double.toString(km2y));
                }
                else if (sOutUnit=="Miles"){
                    double km2mi = Double.parseDouble(sInput)*0.62137;
                    output.setText(Double.toString(km2mi));
                }

                else {
                    output.setText("Please Select an Output Unit");
                }
            }

            else if (sInUnit=="Inches"){
                if (sOutUnit=="Millimeters"){
                    double in2mm = Double.parseDouble(sInput)*25;
                    output.setText(Double.toString(in2mm));
                }
                else if (sOutUnit=="Centmeters"){
                    double in2cm = Double.parseDouble(sInput)*2.5;
                    output.setText(Double.toString(in2cm));
                }
                else if (sOutUnit=="Meters"){
                    double in2m = Double.parseDouble(sInput)*2.5/100;
                    output.setText(Double.toString(in2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double in2km = Double.parseDouble(sInput)*2.5/100000;
                    output.setText(Double.toString(in2km));
                }
                else if (sOutUnit=="Inches"){
                    double in2in = Double.parseDouble(sInput);
                    output.setText(Double.toString(in2in));
                }
                else if (sOutUnit=="Feet"){
                    double in2ft = Double.parseDouble(sInput)/12;
                    output.setText(Double.toString(in2ft));
                }
                else if (sOutUnit=="Yards"){
                    double in2y = Double.parseDouble(sInput)*0.027778;
                    output.setText(Double.toString(in2y));
                }
                else if (sOutUnit=="Miles"){
                    double in2mi = Double.parseDouble(sInput)*0.000015783;
                    output.setText(Double.toString(in2mi));
                }

                else {
                    output.setText("Please Select an Output Unit");
                }
            }

            else if (sInUnit=="Feet"){
                if (sOutUnit=="Millimeters"){
                    double ft2mm = Double.parseDouble(sInput)*300;
                    output.setText(Double.toString(ft2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double ft2cm = Double.parseDouble(sInput)*30;
                    output.setText(Double.toString(ft2cm));
                }
                else if (sOutUnit=="Meters"){
                    double ft2m = Double.parseDouble(sInput)*30/100;
                    output.setText(Double.toString(ft2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double ft2km = Double.parseDouble(sInput)*30/100000;
                    output.setText(Double.toString(ft2km));
                }
                else if (sOutUnit=="Inches"){
                    double ft2in = Double.parseDouble(sInput)*12;
                    output.setText(Double.toString(ft2in));
                }
                else if (sOutUnit=="Feet"){
                    double ft2ft = Double.parseDouble(sInput);
                    output.setText(Double.toString(ft2ft));
                }
                else if (sOutUnit=="Yards"){
                    double ft2y = Double.parseDouble(sInput)/3;
                    output.setText(Double.toString(ft2y));
                }
                else if (sOutUnit=="Miles"){
                    double ft2mi = Double.parseDouble(sInput)*0.00018939;
                    output.setText(Double.toString(ft2mi));
                }
                
                
                else {
                    output.setText("Please Select an Output Unit");
                }
            }
            else if (sInUnit=="Yards"){
                if (sOutUnit=="Millimeters"){
                    double y2mm = Double.parseDouble(sInput)*900;
                    output.setText(Double.toString(y2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double y2cm = Double.parseDouble(sInput)*90;
                    output.setText(Double.toString(y2cm));
                }
                else if (sOutUnit=="Meters"){
                    double y2m = Double.parseDouble(sInput)*90/100;
                    output.setText(Double.toString(y2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double y2km = Double.parseDouble(sInput)*90/100000;
                    output.setText(Double.toString(y2km));
                }
                else if (sOutUnit=="Inches"){
                    double y2in = Double.parseDouble(sInput)*36;
                    output.setText(Double.toString(y2in));
                }
                else if (sOutUnit=="Feet"){
                    double y2ft = Double.parseDouble(sInput)*3;
                    output.setText(Double.toString(y2ft));
                }
                else if (sOutUnit=="Yards"){
                    double y2y = Double.parseDouble(sInput);
                    output.setText(Double.toString(y2y));
                }
                else if (sOutUnit=="Miles"){
                    double y2mi = Double.parseDouble(sInput)*0.00056818;
                    output.setText(Double.toString(y2mi));
                }
            else {
                output.setText("Please Select an Input Unit");
            }
        }
        
            else if (sInUnit=="Miles"){
                if (sOutUnit=="Millimeters"){
                    double mi2mm = Double.parseDouble(sInput)/0.00000062137;
                    output.setText(Double.toString(mi2mm));
                }
                else if (sOutUnit=="Centimeters"){
                    double mi2cm = Double.parseDouble(sInput)/0.0000062137;
                    output.setText(Double.toString(mi2cm));
                }
                else if (sOutUnit=="Meters"){
                    double mi2m = Double.parseDouble(sInput)/0.00062137;
                    output.setText(Double.toString(mi2m));

                }
                else if (sOutUnit=="Kilometers"){
                    double mi2km = Double.parseDouble(sInput)/0.62137;
                    output.setText(Double.toString(mi2km));
                }
                else if (sOutUnit=="Inches"){
                    double mi2in = Double.parseDouble(sInput)*63360;
                    output.setText(Double.toString(mi2in));
                }
                else if (sOutUnit=="Feet"){
                    double mi2ft = Double.parseDouble(sInput)*63360/12;
                    output.setText(Double.toString(mi2ft));
                }
                else if (sOutUnit=="Yards"){
                    double mi2y = Double.parseDouble(sInput)*63360/36;
                    output.setText(Double.toString(mi2y));
                }
                else if (sOutUnit=="Miles"){
                    double mi2mi = Double.parseDouble(sInput);
                    output.setText(Double.toString(mi2mi));
                }
                else {
                    output.setText("Please Select an Output Unit");
                }
            }
        }
    }//GEN-LAST:event_convertActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
        Menu menu = new Menu();
        menu.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_menuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Length.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Length.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Length.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Length.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Length().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convert;
    private javax.swing.JComboBox<String> inUnit;
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton menu;
    private javax.swing.JComboBox<String> outUnit;
    private javax.swing.JLabel output;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
